{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\NFT-Wallet-Checker\\\\checker-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport CheckerForm from './components/CheckerForm';\nimport ResultDisplay from './components/ResultDisplay';\nimport Footer from './components/Footer';\nimport ContactButton from './components/ContactButton';\nimport GlobalStyles from './styles/GlobalStyles';\nimport { getAlchemyInstance } from './utils/alchemyConfig';\nimport { checkWhitelist } from './utils/whitelistConfig';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleCheck = async ({\n    walletAddress\n  }) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Default to ethereum network\n      const network = 'ethereum';\n\n      // Check if wallet is whitelisted\n      const isWhitelisted = checkWhitelist(walletAddress, network);\n      const alchemy = getAlchemyInstance(network);\n\n      // Get NFTs for the wallet\n      const nftsResponse = await alchemy.nft.getNftsForOwner(walletAddress);\n\n      // Format the NFTs data\n      const nfts = await Promise.all(nftsResponse.ownedNfts.map(async nft => {\n        var _nft$media$;\n        return {\n          name: nft.title || 'Unnamed NFT',\n          collection: nft.contract.name || 'Unknown Collection',\n          tokenId: nft.tokenId,\n          image: ((_nft$media$ = nft.media[0]) === null || _nft$media$ === void 0 ? void 0 : _nft$media$.gateway) || 'https://via.placeholder.com/200?text=No+Image',\n          description: nft.description,\n          contractAddress: nft.contract.address,\n          tokenType: nft.tokenType,\n          timeLastUpdated: nft.timeLastUpdated\n        };\n      }));\n      setResult({\n        walletAddress,\n        network,\n        nfts,\n        totalCount: nftsResponse.totalCount,\n        isWhitelisted\n      });\n    } catch (err) {\n      setError(err.message || 'Failed to fetch NFTs');\n      console.error('Error fetching NFTs:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(CheckerForm, {\n        onSubmit: handleCheck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: '800px',\n          margin: '1rem auto',\n          padding: '1rem',\n          background: 'rgba(239, 68, 68, 0.15)',\n          color: '#ef4444',\n          borderRadius: '12px',\n          textAlign: 'center'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: '800px',\n          margin: '2rem auto',\n          textAlign: 'center',\n          color: '#6366f1'\n        },\n        children: \"Loading NFTs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ResultDisplay, {\n        result: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"uCtqE6L5cE1OQfqZvrQ3dzd9CGE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","CheckerForm","ResultDisplay","Footer","ContactButton","GlobalStyles","getAlchemyInstance","checkWhitelist","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","result","setResult","loading","setLoading","error","setError","handleCheck","walletAddress","network","isWhitelisted","alchemy","nftsResponse","nft","getNftsForOwner","nfts","Promise","all","ownedNfts","map","_nft$media$","name","title","collection","contract","tokenId","image","media","gateway","description","contractAddress","address","tokenType","timeLastUpdated","totalCount","err","message","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","style","maxWidth","margin","padding","background","color","borderRadius","textAlign","_c","$RefreshReg$"],"sources":["E:/code/NFT-Wallet-Checker/checker-app/src/App.js"],"sourcesContent":["import { useState } from 'react';\r\nimport Header from './components/Header';\r\nimport CheckerForm from './components/CheckerForm';\r\nimport ResultDisplay from './components/ResultDisplay';\r\nimport Footer from './components/Footer';\r\nimport ContactButton from './components/ContactButton';\r\nimport GlobalStyles from './styles/GlobalStyles';\r\nimport { getAlchemyInstance } from './utils/alchemyConfig';\r\nimport { checkWhitelist } from './utils/whitelistConfig';\r\n\r\nfunction App() {\r\n  const [result, setResult] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleCheck = async ({ walletAddress }) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Default to ethereum network\r\n      const network = 'ethereum';\r\n      \r\n      // Check if wallet is whitelisted\r\n      const isWhitelisted = checkWhitelist(walletAddress, network);\r\n      \r\n      const alchemy = getAlchemyInstance(network);\r\n      \r\n      // Get NFTs for the wallet\r\n      const nftsResponse = await alchemy.nft.getNftsForOwner(walletAddress);\r\n      \r\n      // Format the NFTs data\r\n      const nfts = await Promise.all(nftsResponse.ownedNfts.map(async (nft) => {\r\n        return {\r\n          name: nft.title || 'Unnamed NFT',\r\n          collection: nft.contract.name || 'Unknown Collection',\r\n          tokenId: nft.tokenId,\r\n          image: nft.media[0]?.gateway || 'https://via.placeholder.com/200?text=No+Image',\r\n          description: nft.description,\r\n          contractAddress: nft.contract.address,\r\n          tokenType: nft.tokenType,\r\n          timeLastUpdated: nft.timeLastUpdated,\r\n        };\r\n      }));\r\n\r\n      setResult({\r\n        walletAddress,\r\n        network,\r\n        nfts,\r\n        totalCount: nftsResponse.totalCount,\r\n        isWhitelisted,\r\n      });\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to fetch NFTs');\r\n      console.error('Error fetching NFTs:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyles />\r\n      <Header />\r\n      <main>\r\n        <CheckerForm onSubmit={handleCheck} />\r\n        {error && (\r\n          <div style={{ \r\n            maxWidth: '800px', \r\n            margin: '1rem auto', \r\n            padding: '1rem', \r\n            background: 'rgba(239, 68, 68, 0.15)', \r\n            color: '#ef4444',\r\n            borderRadius: '12px',\r\n            textAlign: 'center' \r\n          }}>\r\n            {error}\r\n          </div>\r\n        )}\r\n        {loading ? (\r\n          <div style={{ \r\n            maxWidth: '800px', \r\n            margin: '2rem auto', \r\n            textAlign: 'center',\r\n            color: '#6366f1' \r\n          }}>\r\n            Loading NFTs...\r\n          </div>\r\n        ) : (\r\n          <ResultDisplay result={result} />\r\n        )}\r\n      </main>\r\n      <ContactButton />\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,SAASC,cAAc,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMqB,WAAW,GAAG,MAAAA,CAAO;IAAEC;EAAc,CAAC,KAAK;IAC/C,IAAI;MACFJ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,MAAMG,OAAO,GAAG,UAAU;;MAE1B;MACA,MAAMC,aAAa,GAAGhB,cAAc,CAACc,aAAa,EAAEC,OAAO,CAAC;MAE5D,MAAME,OAAO,GAAGlB,kBAAkB,CAACgB,OAAO,CAAC;;MAE3C;MACA,MAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAG,CAACC,eAAe,CAACN,aAAa,CAAC;;MAErE;MACA,MAAMO,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACL,YAAY,CAACM,SAAS,CAACC,GAAG,CAAC,MAAON,GAAG,IAAK;QAAA,IAAAO,WAAA;QACvE,OAAO;UACLC,IAAI,EAAER,GAAG,CAACS,KAAK,IAAI,aAAa;UAChCC,UAAU,EAAEV,GAAG,CAACW,QAAQ,CAACH,IAAI,IAAI,oBAAoB;UACrDI,OAAO,EAAEZ,GAAG,CAACY,OAAO;UACpBC,KAAK,EAAE,EAAAN,WAAA,GAAAP,GAAG,CAACc,KAAK,CAAC,CAAC,CAAC,cAAAP,WAAA,uBAAZA,WAAA,CAAcQ,OAAO,KAAI,+CAA+C;UAC/EC,WAAW,EAAEhB,GAAG,CAACgB,WAAW;UAC5BC,eAAe,EAAEjB,GAAG,CAACW,QAAQ,CAACO,OAAO;UACrCC,SAAS,EAAEnB,GAAG,CAACmB,SAAS;UACxBC,eAAe,EAAEpB,GAAG,CAACoB;QACvB,CAAC;MACH,CAAC,CAAC,CAAC;MAEH/B,SAAS,CAAC;QACRM,aAAa;QACbC,OAAO;QACPM,IAAI;QACJmB,UAAU,EAAEtB,YAAY,CAACsB,UAAU;QACnCxB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOyB,GAAG,EAAE;MACZ7B,QAAQ,CAAC6B,GAAG,CAACC,OAAO,IAAI,sBAAsB,CAAC;MAC/CC,OAAO,CAAChC,KAAK,CAAC,sBAAsB,EAAE8B,GAAG,CAAC;IAC5C,CAAC,SAAS;MACR/B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACER,OAAA,CAAAE,SAAA;IAAAwC,QAAA,gBACE1C,OAAA,CAACJ,YAAY;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChB9C,OAAA,CAACT,MAAM;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV9C,OAAA;MAAA0C,QAAA,gBACE1C,OAAA,CAACR,WAAW;QAACuD,QAAQ,EAAEpC;MAAY;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACrCrC,KAAK,iBACJT,OAAA;QAAKgD,KAAK,EAAE;UACVC,QAAQ,EAAE,OAAO;UACjBC,MAAM,EAAE,WAAW;UACnBC,OAAO,EAAE,MAAM;UACfC,UAAU,EAAE,yBAAyB;UACrCC,KAAK,EAAE,SAAS;UAChBC,YAAY,EAAE,MAAM;UACpBC,SAAS,EAAE;QACb,CAAE;QAAAb,QAAA,EACCjC;MAAK;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,EACAvC,OAAO,gBACNP,OAAA;QAAKgD,KAAK,EAAE;UACVC,QAAQ,EAAE,OAAO;UACjBC,MAAM,EAAE,WAAW;UACnBK,SAAS,EAAE,QAAQ;UACnBF,KAAK,EAAE;QACT,CAAE;QAAAX,QAAA,EAAC;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,gBAEN9C,OAAA,CAACP,aAAa;QAACY,MAAM,EAAEA;MAAO;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACjC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACP9C,OAAA,CAACL,aAAa;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjB9C,OAAA,CAACN,MAAM;MAAAiD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACV,CAAC;AAEP;AAAC1C,EAAA,CAtFQD,GAAG;AAAAqD,EAAA,GAAHrD,GAAG;AAwFZ,eAAeA,GAAG;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}