{"ast":null,"code":"const MORALIS_API_KEY = process.env.REACT_APP_MORALIS_API_KEY;\nconst MORALIS_API_URL = 'https://deep-index.moralis.io/api/v2';\nexport const checkWhitelist = async walletAddress => {\n  try {\n    const options = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'X-API-Key': MORALIS_API_KEY\n      }\n    };\n\n    // Get NFT holdings and token balances\n    const [nftResponse, tokenResponse] = await Promise.all([fetch(`${MORALIS_API_URL}/${walletAddress}/nft?chain=eth&format=decimal`, options), fetch(`${MORALIS_API_URL}/${walletAddress}/erc20?chain=eth`, options)]);\n    const nftData = await nftResponse.json();\n    const tokenData = await tokenResponse.json();\n\n    // You can customize these criteria based on your requirements\n    const hasNFTs = nftData.result && nftData.result.length > 0;\n    const hasTokens = tokenData.length > 0;\n    return {\n      isWhitelisted: hasNFTs || hasTokens,\n      details: {\n        nftCount: nftData.result ? nftData.result.length : 0,\n        tokenCount: tokenData.length,\n        lastChecked: new Date().toISOString()\n      }\n    };\n  } catch (error) {\n    console.error('Moralis API Error:', error);\n    throw new Error('Failed to check wallet status');\n  }\n};","map":{"version":3,"names":["MORALIS_API_KEY","process","env","REACT_APP_MORALIS_API_KEY","MORALIS_API_URL","checkWhitelist","walletAddress","options","method","headers","nftResponse","tokenResponse","Promise","all","fetch","nftData","json","tokenData","hasNFTs","result","length","hasTokens","isWhitelisted","details","nftCount","tokenCount","lastChecked","Date","toISOString","error","console","Error"],"sources":["E:/code/NFT-Wallet-Checker/checker-app/src/utils/moralisConfig.js"],"sourcesContent":["const MORALIS_API_KEY = process.env.REACT_APP_MORALIS_API_KEY;\r\nconst MORALIS_API_URL = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const checkWhitelist = async (walletAddress) => {\r\n  try {\r\n    const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'X-API-Key': MORALIS_API_KEY\r\n      }\r\n    };\r\n\r\n    // Get NFT holdings and token balances\r\n    const [nftResponse, tokenResponse] = await Promise.all([\r\n      fetch(`${MORALIS_API_URL}/${walletAddress}/nft?chain=eth&format=decimal`, options),\r\n      fetch(`${MORALIS_API_URL}/${walletAddress}/erc20?chain=eth`, options)\r\n    ]);\r\n\r\n    const nftData = await nftResponse.json();\r\n    const tokenData = await tokenResponse.json();\r\n\r\n    // You can customize these criteria based on your requirements\r\n    const hasNFTs = nftData.result && nftData.result.length > 0;\r\n    const hasTokens = tokenData.length > 0;\r\n\r\n    return {\r\n      isWhitelisted: hasNFTs || hasTokens,\r\n      details: {\r\n        nftCount: nftData.result ? nftData.result.length : 0,\r\n        tokenCount: tokenData.length,\r\n        lastChecked: new Date().toISOString()\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('Moralis API Error:', error);\r\n    throw new Error('Failed to check wallet status');\r\n  }\r\n}; "],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAC7D,MAAMC,eAAe,GAAG,sCAAsC;AAE9D,OAAO,MAAMC,cAAc,GAAG,MAAOC,aAAa,IAAK;EACrD,IAAI;IACF,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE,kBAAkB;QAC5B,WAAW,EAAET;MACf;IACF,CAAC;;IAED;IACA,MAAM,CAACU,WAAW,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACrDC,KAAK,CAAC,GAAGV,eAAe,IAAIE,aAAa,+BAA+B,EAAEC,OAAO,CAAC,EAClFO,KAAK,CAAC,GAAGV,eAAe,IAAIE,aAAa,kBAAkB,EAAEC,OAAO,CAAC,CACtE,CAAC;IAEF,MAAMQ,OAAO,GAAG,MAAML,WAAW,CAACM,IAAI,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAG,MAAMN,aAAa,CAACK,IAAI,CAAC,CAAC;;IAE5C;IACA,MAAME,OAAO,GAAGH,OAAO,CAACI,MAAM,IAAIJ,OAAO,CAACI,MAAM,CAACC,MAAM,GAAG,CAAC;IAC3D,MAAMC,SAAS,GAAGJ,SAAS,CAACG,MAAM,GAAG,CAAC;IAEtC,OAAO;MACLE,aAAa,EAAEJ,OAAO,IAAIG,SAAS;MACnCE,OAAO,EAAE;QACPC,QAAQ,EAAET,OAAO,CAACI,MAAM,GAAGJ,OAAO,CAACI,MAAM,CAACC,MAAM,GAAG,CAAC;QACpDK,UAAU,EAAER,SAAS,CAACG,MAAM;QAC5BM,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACtC;IACF,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}